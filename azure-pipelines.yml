# OC Release
trigger: none
pr: none

schedules:
- cron: "0 */8 * * *"
  displayName: Schedule Build
  branches:
    include:
    - master
  always: true

variables:
  repo: 'OpenCore-Factory'
  FORCE_INSTALL: 1

pool:
  vmImage: 'macOS-10.14'

steps:

- task: Bash@3
  displayName: Check Changes
  inputs:
    targetType: 'inline'
    script: |
      #!/bin/bash
      cd ../b;
      mkdir "RepoOperation";
      cd "RepoOperation";
      repo=$(repo);
      echo "##vso[task.setvariable variable=BuildCheck]False";
      git clone "https://github.com/williambj1/$repo.git";

      OCLatest="$(git ls-remote https://github.com/acidanthera/OpenCorePkg.git HEAD | cut -c1-40)";
      OcSupportLatest="$(git ls-remote https://github.com/acidanthera/OcSupportPkg.git HEAD | cut -c1-40)";
      EfiLatest="$(git ls-remote https://github.com/acidanthera/EfiPkg.git HEAD | cut -c1-40)";
      MILatest="$(git ls-remote https://github.com/acidanthera/MacInfoPkg.git HEAD | cut -c1-40)";

      OCPrevious=$(<$repo/Commits/OC.sha1);
      OcSupportPrevious=$(<$repo/Commits/OcSupport.sha1);
      EfiPrevious=$(<$repo/Commits/Efi.sha1);
      MIPrevious=$(<$repo/Commits/MI.sha1);

      echo "##vso[task.setvariable variable=OCcmt]$OCPrevious";
      echo "##vso[task.setvariable variable=OcSuppportcmt]$OcSupportPrevious";
      echo "##vso[task.setvariable variable=Eficmt]$EfiPrevious";
      echo "##vso[task.setvariable variable=MIcmt]$MIPrevious";

      if [ $OCPrevious != $OCLatest ]; then
          rm -rf $repo/Commits/OC.sha1;
          echo "Changes found in OpenCore Pkg";
          echo $OCLatest >> $repo/Commits/OC.sha1;
          echo "##vso[task.setvariable variable=BuildCheck]True";
      fi

      if [ $OcSupportPrevious != $OcSupportLatest ]; then
          rm -rf $repo/Commits/OcSupport.sha1;
          echo "Changes found in OcSupportPkg";
          echo $OcSupportLatest >> $repo/Commits/OcSupport.sha1;
          echo "##vso[task.setvariable variable=BuildCheck]True";
      fi

      if [ $EfiPrevious != $EfiLatest ]; then
          rm -rf $repo/Commits/Efi.sha1;
          echo "Changes found in EfiPkg";
          echo $EfiLatest >> $repo/Commits/Efi.sha1;
          echo "##vso[task.setvariable variable=BuildCheck]True";
      fi

      if [ $MIPrevious != $MILatest ]; then
          rm -rf $repo/Commits/MI.sha1;
          echo "Changes found in MacInfoPkg"
          echo $MILatest >> $repo/Commits/MI.sha1;
          echo "##vso[task.setvariable variable=BuildCheck]True"
      fi

- task: Bash@3
  condition: eq(variables['BuildCheck'], 'True')
  displayName: Build OC
  inputs:
    targetType: 'inline'
    script: |
      #!/bin/bash
      BD="$(date +"%Y-%m-%d")";
      echo "##vso[task.setvariable variable=BuildDate]$BD";
      cd ../b;
      git clone https://github.com/acidanthera/OpenCorePkg.git;
      cd OpenCorePkg;
      sed -i -e 's/--depth=1 //' macbuild.tool
      sed -i -e 's/.dsc/.dsc \| xcpretty/g' macbuild.tool
      sed -i -e 's/updaterepo "https\:\/\/github.com\/acidanthera\/audk" UDK master || exit 1/git clone https\:\/\/github.com\/acidanthera\/audk --depth=1 UDK || exit 1/' macbuild.tool
      ./macbuild.tool

- task: CmdLine@2
  condition: eq(variables['BuildCheck'], 'True')
  displayName: Move Binaries
  inputs:
    script: |
      cd ../b/OpenCorePkg;
      mkdir ../../a/OC;
      cp UDK/Build/OpenCorePkg/DEBUG*/X64/OpenCore*.zip ../../a/OC;
      cp UDK/Build/OpenCorePkg/RELEASE*/X64/OpenCore*.zip ../../a/OC;
      cd UDK/Build/OpenCorePkg/NOOPT*/X64;
      zip -r OpenCore-NOOPT.zip *.efi;
      cp OpenCore-NOOPT.zip ../../../../../../../a/OC

- task: Bash@3
  condition: eq(variables['BuildCheck'], 'True')
  displayName: Get Commits
  inputs:
    script: |
      echo "## Changes" >> $(Build.ArtifactStagingDirectory)/ReleaseNotes.md
      cd ../b/OpenCorePkg/UDK/OpenCorePkg;
      OCcount="$(git rev-list --count $(OCcmt)..HEAD)"
      if [ OCcount != 0 ]; then
        OCNote=$(git log -$count --oneline --format=" - %s")
        echo "### OpenCorePkg" >> $(Build.ArtifactStagingDirectory)/ReleaseNotes.md
        echo $OCNote >> $(Build.ArtifactStagingDirectory)/ReleaseNotes.md
      fi

      cd ../OcSupportPkg
      OcSupportcount="$(git rev-list --count $(OcSupportcmt)..HEAD)"
      if [ OcSupportcount != 0 ]; then
        OcSupportNote=$(git log -$count --oneline --format=" - %s")
        echo "### OcSupportPkg" >> $(Build.ArtifactStagingDirectory)/ReleaseNotes.md
        echo $OcSupportNote >> $(Build.ArtifactStagingDirectory)/ReleaseNotes.md
      fi

      cd ../EfiPkg
      Eficount="$(git rev-list --count $(Eficmt)..HEAD)"
      if [ Eficount != 0 ]; then
        EfiNote=$(git log -$count --oneline --format=" - %s")
        echo "### EfiPkg" >> $(Build.ArtifactStagingDirectory)/ReleaseNotes.md
        echo $EfiNote >> $(Build.ArtifactStagingDirectory)/ReleaseNotes.md
      fi

      cd ../MacInfoPkg
      MIcount="$(git rev-list --count $(MIcmt)..HEAD)"
      if [ MIcount != 0 ]; then
        MINote=$(git log -$count --oneline --format=" - %s")
        echo "### MacInfoPkg" >> $(Build.ArtifactStagingDirectory)/ReleaseNotes.md
        echo $MINote >> $(Build.ArtifactStagingDirectory)/ReleaseNotes.md
      fi

- task: CmdLine@2
  condition: eq(variables['BuildCheck'], 'True')
  displayName: Refreash Commits
  inputs:
    script: |
      git config --global credential.helper store
      echo https://$(PAT):x-oauth-basic@github.com >> ~/.git-credentials
      echo "" >> ~/.git-credentials
      git config --global user.email $(Email)
      git config --global user.name $(User)
      cd ../b/RepoOperation/$(repo);
      git add .;
      git commit -m "Refresh Commits to $(BuildDate)";
      git push origin master

- task: GitHubRelease@0
  condition: eq(variables['BuildCheck'], 'True')
  displayName: 'Publish GitHub Release'
  inputs:
    gitHubConnection: release
    repositoryName: '$(Build.Repository.Name)'
    action: 'edit'
    target: '$(Build.SourceVersion)'
    tagSource: 'manual'
    tag: '$(BuildDate)'
    title: '$(BuildDate)'
    releaseNotesFile: '$(Build.ArtifactStagingDirectory)/ReleaseNotes.md'
    assets: '$(Build.ArtifactStagingDirectory)/OC/OpenCore*.zip'
    addChangeLog: false
    isPreRelease: true